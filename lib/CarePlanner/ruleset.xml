<?xml version="1.0"?>
<ruleset name="CarePlanner" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="vendor/squizlabs/php_codesniffer/phpcs.xsd">
    <description>The CarePlanner coding standard.</description>

    <rule ref="Doctrine">
        <!-- Aligning assignment statements can cause messy diffs (and is harder to read) -->
        <exclude name="Generic.Formatting.MultipleStatementAlignment"/>
        <!-- Disable forcing whitespace after `!` -->
        <exclude name="Generic.Formatting.SpaceAfterNot"/>
        <!-- Exclude phpDoc alignment ugliness (more messy diffs) -->
        <exclude name="Squiz.Commenting.DocCommentAlignment"/>
        <!-- Disable forcing aligning array values (messy diffs) -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/>
        <!-- Disable param alignment (messy diffs) -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
    </rule>

    <!-- Require early exit but not if last position in scope -->
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit">
        <properties>
            <property name="ignoreStandaloneIfInScope" value="true" />
            <property name="ignoreOneLineTrailingIf" value="true" />
            <property name="ignoreTrailingIfWithOneInstruction" value="true" />
        </properties>
    </rule>

    <!-- Require arrays to be created before values can be assigned -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation" />
    <!-- Require an empty line between class members -->
    <rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing">
        <properties>
            <property name="lineCountBetweenMembers" value="1" />
        </properties>
    </rule>
    <!-- Require class members to be in the defined order -->
    <rule ref="SlevomatCodingStandard.Classes.ClassStructure">
        <properties>
            <property name="groups" type="array">
                <element value="uses"/>
                <element value="public constants"/>
                <element value="constants"/>
                <element value="public static properties"/>
                <element value="static properties"/>
                <element value="public properties"/>
                <element value="properties"/>
                <element value="constructor"/>
                <element value="magic methods"/>
                <element value="methods"/>
            </property>
        </properties>
    </rule>
    <!-- Require a certain number of blank lines between constants -->
    <rule ref="SlevomatCodingStandard.Classes.ConstantSpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="1" />
            <property name="maxLinesCountBeforeWithComment" value="1" />
            <property name="minLinesCountBeforeWithoutComment" value="0" />
            <property name="maxLinesCountBeforeWithoutComment" value="1" />
        </properties>
    </rule>
    <!-- Require exactly 1 line between methods -->
    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing">
        <properties>
            <property name="minLinesCount" value="1" />
            <property name="maxLinesCount" value="1" />
        </properties>
    </rule>
    <!-- Require a certain number of blank lines between properties -->
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="1" />
            <property name="maxLinesCountBeforeWithComment" value="1" />
            <property name="minLinesCountBeforeWithoutComment" value="0" />
            <property name="maxLinesCountBeforeWithoutComment" value="1" />
        </properties>
    </rule>
    <!-- Force a method signature to be 1 line if it can fit -->
    <rule ref="SlevomatCodingStandard.Classes.RequireSingleLineMethodSignature">
        <properties>
            <property name="maxLineLength" value="120" />
        </properties>
    </rule>
    <!-- Forbid useless late static binding -->
    <rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding" />
    <!-- Forbid @deprecated without a description -->
    <rule ref="SlevomatCodingStandard.Commenting.DeprecatedAnnotationDeclaration" />
    <!-- Forbid useless annotations - Git and LICENCE file provide more accurate information -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@api"/>
                <element value="@author"/>
                <element value="@category"/>
                <element value="@copyright"/>
                <element value="@created"/>
                <element value="@license"/>
                <element value="@package"/>
                <element value="@since"/>
                <element value="@subpackage"/>
                <element value="@version"/>
            </property>
        </properties>
    </rule>
    <!-- Report invalid format of inline phpDocs with @var -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration">
        <properties>
            <property name="allowDocCommentAboveReturn" value="true" />
        </properties>
    </rule>
    <!-- Forbid continue without integer operand because it emits a warning -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch" />
    <!-- Forbid obmitting paretheses for empty constructor call -->
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses" />
    <!-- Require ?: where possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator" />
    <!-- Require ternary where possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator" />
    <!-- Forbid capturing in a catch where the variable is not used -->
    <rule ref="SlevomatCodingStandard.Exceptions.RequireNonCapturingCatch" />
    <!-- Require empty functions to have a comment -->
    <rule ref="SlevomatCodingStandard.Functions.DisallowEmptyFunction" />
    <!-- Require the use of arrow functions where possible -->
    <rule ref="SlevomatCodingStandard.Functions.RequireArrowFunction" />
    <!-- Require a function call to be on a single line if it can fit -->
    <rule ref="SlevomatCodingStandard.Functions.RequireSingleLineCall">
        <properties>
            <property name="maxLineLength" value="120" />
        </properties>
    </rule>
    <!-- Require a trailing comma in calls for cleaner diffs -->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall" />
    <!-- Require a trailing comma in declarations for cleaner diffs -->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration" />
    <!-- Forbid functions that are too long -->
    <rule ref="SlevomatCodingStandard.Functions.FunctionLength">
        <properties>
            <property name="maxLinesLength" value="100" />
        </properties>
    </rule>
    <!-- Forbid unused parameters -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter" />
    <!-- Forbid useless parameter defaults -->
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue" />
    <!-- Force proper formatting on namespace declaration -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration" />
    <!-- Forbid multiple namespaces in a file -->
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile" />
    <!-- Require separators in large numbers -->
    <rule ref="SlevomatCodingStandard.Numbers.RequireNumericLiteralSeparator" />
    <!-- Require increment and decrement operators to be standalone -->
    <rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators" />
    <!-- Forbid references -->
    <rule ref="SlevomatCodingStandard.PHP.DisallowReference" />
    <!-- Check the format of union type hints -->
    <rule ref="SlevomatCodingStandard.TypeHints.UnionTypeHintFormat">
        <properties>
            <property name="withSpaces" value="no" />
            <property name="nullPosition" value="last" />
        </properties>
    </rule>
    <!-- Forbid unused variables -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable" />


    <!-- Severity 4 - minor code changes -->
    <!-- Forbid assigning variables within a condition -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition">
        <severity>4</severity>
    </rule>
    <!-- Require the use of $strict = true for functions with the parameter -->
    <rule ref="SlevomatCodingStandard.Functions.StrictCall">
        <severity>4</severity>
    </rule>

    <!-- Severity 3 - minor code refactors -->
    <!-- Forbid "Abstract" in name of abstract class -->
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming">
        <severity>3</severity>
    </rule>
    <!-- Forbid "Exception" in name of exception class -->
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming">
        <severity>3</severity>
    </rule>
    <!-- Forbid "Interface" in name of interface -->
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming">
        <severity>3</severity>
    </rule>
    <!-- Forbid "Trait" in name of trait -->
    <rule ref="SlevomatCodingStandard.Classes.SuperfluousTraitNaming">
        <severity>3</severity>
    </rule>

    <!-- Severity 2 - major code refactors -->

    <!-- Severity 1 - case by case basis -->
    <!-- Forbid parameters that have no uses -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedParameter">
        <severity>1</severity>
    </rule>
    <!-- Forbid functions longer than 40 lines -->
    <rule ref="SlevomatCodingStandard.Functions.FunctionLength">
        <properties>
            <property name="maxLinesLength" value="40" />
        </properties>
        <severity>1</severity>
    </rule>
</ruleset>
